//Alterative solution O(nlgn), made small mistake. be careful with array index to avoid infinite loop.
//binary search --> lgn layer, each layer search n times (add A[i] n times). 

public class Solution {
    public int maxSubArray(int[] A) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(A == null){
            return 0;
        }
          
        return merge(A, 0, A.length - 1);
    }
    
    public int merge(int[] A, int start, int end){
        if(end < start){
            return 0;
        }
        if(start == end){
            return A[start];
        }
        
        int mid = (start + end)/2;
        int leftMax = merge(A, start, mid);
        int rightMax = merge(A, mid + 1, end);
        int midMax = 0;
        int sumL = 0, sumR = 0;
        int maxL = A[mid], maxR = A[mid + 1];
        for(int i = mid; i >= start; i--){
            sumL += A[i];
            if(sumL > maxL){
                maxL = sumL;
            }
        }
        
        for(int i = mid + 1; i <= end; i++){
            sumR += A[i];
            if(sumR > maxR){
                maxR = sumR;
            }
        }
        
        int max = Math.max(leftMax, rightMax);
        
            max = Math.max(max, maxR + maxL);
        
        
        return max;
    }
}
