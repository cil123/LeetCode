//still time limit exceeded
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
 import java.util.*;
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        if(head == null){
            return null;
        }
        RandomListNode p = head;
        RandomListNode q = head;
        
        Hashtable<RandomListNode, RandomListNode> hash = new Hashtable<RandomListNode, RandomListNode>();
        
        while(p != null){
            RandomListNode temp = new RandomListNode(p.label);
            temp.next = null;
            temp.random = null;
            hash.put(p, temp);
            p = p.next;
        }
        
        while(q != null){
            RandomListNode curNode = hash.get(q);
            if(q.next != null){
                RandomListNode nextNode = hash.get(q.next);
                curNode.next = nextNode;
            }
            if(q.random != null){
                RandomListNode randNode = hash.get(q.random);
                curNode.random = randNode;
            }
        }
        return hash.get(head);
    }
}
