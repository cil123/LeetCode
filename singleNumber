// i wanted to use bit vector to solve it, which can save a lot of space.
// However, it cannot deal with negative elements.

// Use a hashtable to count the number of elements appear in A. Then iterate the key of hashtable.

// O(n)

// pass OG

import java.util.*;
public class Solution {
    public int singleNumber(int[] A) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        assert(A != null && A.length != 0);
        Hashtable<Integer, Integer> hash = new Hashtable<Integer, Integer>();
        for(int i = 0; i < A.length; i++){
            int value = A[i];
            if(!hash.containsKey(value)){
                hash.put(value, 1);
            }else{
                hash.put(value, hash.get(value) + 1);
            }
        }
        for(int k : hash.keySet()){
            if(hash.get(k) == 1){
                return k;
            }
        }
        return 0;
    }
}
